//Non linear layer 

Shift : {y ,z} (y == 3, z == 32)
 => [y][z] -> [y][z]
Shift column = [a] # [b] # [(column @ 2)]
  where  a = (column @ 0 <<< 24) : [32]
         b = (column @ 1 <<< 9) : [32]

ShiftCols : {x, y ,z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
ShiftCols matrix = transpose Shifted
  where Tmatrix = transpose matrix
        Shifted = map (\x -> Shift x) Tmatrix

TFunction : {y, z} (y == 3, z == 32)
 => [y][z] -> [y][z]
TFunction column = [z1] # [y1] # [x1]
  where x = (column @ 0) : [32]
        y = (column @ 1) : [32]
        z = (column @ 2) : [32]
        x1 = x ^ (z << 1) ^ (( y && z) << 2)
        y1 = y ^ x ^ ( (x || z) << 1)
        z1 = z ^ y ^ ((x && y) << 3)

TFunctionCols : {x, y, z} (x == 3,y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
TFunctionCols matrix = transpose output
  where Tmatrix = transpose matrix
        output = map (\x -> TFunction x) Tmatrix

SPbox : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
SPbox matrix = output
  where Shifted = ShiftCols matrix
        output = TFunctionCols Shifted



//Linear layer

SmallSwap : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
SmallSwap state = [[second] # [first] # [fourth] # [third]] # state @@ [ 1..2]
  where first = (state @ 0) @ 0
        second = (state @ 0) @ 1
        third = (state @ 0) @ 2
        fourth = (state @ 0) @ 3

BigSwap : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
BigSwap state = [[third] # [fourth] # [first] # [second]] # state @@[1..2]
  where first = (state @ 0) @ 0
        second = (state @ 0) @ 1
        third = (state @ 0) @ 2
        fourth = (state @ 0) @ 3


//Add Constant

AddConstant : {x, y, z} (x == 3, y == 4, z == 32) 
 => ([x][y][z], [z]) -> [x][y][z]
AddConstant (state, r) = [([S00] # (state @ 0) @@ [1..3])] # (state @@ [1,2])
  where S00 = (((state @ 0) @ 0) ^ 0x9e377900 ^ r)

//Gimli Permutation

NextWord : {x, y, z} (x == 3, y == 4, z == 32)
 => ([x][y][z], [z]) -> [x][y][z]
NextWord (state, i) = output
  where output = if i % 4 == 0 
                 then AddConstant((SmallSwap (SPbox state)), i)
                 else if i % 4 == 2 
                      then BigSwap(SPbox state)
                      else SPbox state

GimliPermutation : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
GimliPermutation state = output !0
  where output = [state] # [NextWord(x, i) | i <- [24, 23 .. 1]
                                           | x <- output
                           ]

// //Absorb

Absorb : {x, y, z} (x == 3, y == 4, z == 32)
 => ([x][y][z], [y][z]) -> [x][y][z]
Absorb (state, m) = GimliPermutation([first] # state @@ [1, 2])
  where first = (state @ 0) ^ m// [x ^ y | x <- state @ 0 | y <- m]

//Squeeze

Squeeze : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [y][z]
Squeeze matrix = matrix @ 0

//////////////////////////////////////////////////////////////////////
// Tu zaczynaja sie funkcje uzywane do szyfrowania
//////////////////////////////////////////////////////////////////////

//Encryption

SetState : {x, y, z} (x == 3, y == 4, z == 32)
 => ([y][z], [2][y][z]) -> [x][y][z]
SetState (nonce, key) = GimliPermutation([nonce] # key)

//Process data

ProcessAD : {x, y, z, n} (x == 3, y == 4, z == 32, fin n)
 => ([x][y][z], [n][y][z]) -> [x][y][z]
ProcessAD (state, data) = GimliPermutation output
  where absorbed  = [state] # [Absorb(x, y) | y <- data
                                            | x <- absorbed
                              ]
        temp = absorbed ! 0
        firstXored = [0x00000001 ^ ((temp @ 0) @ 0)] # (temp @ 0) @@ [1 .. 3]
        lastXored = (temp @ 2) @@ [0 .. 2] # [0x01000000 ^ ((temp @ 2) @ 3)] 
        output =  [firstXored] # [temp @ 1] # [lastXored]

//ProcessPlainText

ProcessPlaintext : {x, y, z, n} (x == 3, y == 4, z == 32, fin n)
 => ([x][y][z], [n][y][z]) -> ([n][y][z], [x][y][z])
ProcessPlaintext (state, plaintext) = (ciphertext, GimliPermutation lastState)
  where states = [state] # [Absorb(x, y) | y <- plaintext
                                         | x <- states  
                           ]
        keys = [Squeeze x | x <- states]
        ciphertext = [x ^ y | x <- keys | y <- plaintext]
        temp = states ! 0
        firstRow = [0x00000001 ^ (temp @ 0) @ 0 ] # (temp @ 0) @@ [1 .. 3]
        lastRow = (temp @ 2) @@ [0 .. 2] # [0x01000000 ^ (temp @ 2) @ 3]
        lastState = [firstRow] # [temp @ 1] # [lastRow]

//Encryption

Encryption : {x, y, z, n} (x == 3, y == 4, z == 32, fin n, n >= 1)
 => ([n][y][z], [n][y][z], [y][z], [2][y][z]) -> ([n][y][z], [x][y][z])
Encryption (M, AD, N, K) = (C, T)
  where output = ProcessPlaintext(ProcessAD(SetState(N, K), AD), M)
        C = output.0
        T = output.1

// //Decryption

// Decryption : {x, y, z, n} (x == 3, y == 4, z == 32, fin n, n >= 1)
//  => ([n][y][z], [n][y][z], [y][z], [2][y][z], [y][z]) -> ([n][y][z], Bit)
// Decryption (C, AD, N, K, T) = (M, Tcheck)
//   where output = Encryption(C, AD, N, K)
//         M = output.0
//         T' = output.1
//         Tcheck = if T == T' then True
//                             else False