//Non linear layer 

Shift : {y ,z} (y == 3, z == 32)
 => [y][z] -> [y][z]
Shift column = [a] # [b] # [(column @ 2)]
  where  a = (column @ 0 <<< 24) : [32]
         b = (column @ 1 <<< 9) : [32]

ShiftCols : {x, y ,z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
ShiftCols matrix = transpose Shifted
  where Tmatrix = transpose matrix
        Shifted = map (\x -> Shift x) Tmatrix

TFunction : {y, z} (y == 3, z == 32)
 => [y][z] -> [y][z]
TFunction column = [z1] # [y1] # [x1]
  where x = (column @ 0) : [32]
        y = (column @ 1) : [32]
        z = (column @ 2) : [32]
        x1 = x ^ (z << 1) ^ (( y && z) << 2)
        y1 = y ^ x ^ ( (x || z) << 1)
        z1 = z ^ y ^ ((x && y) << 3)

TFunctionCols : {x, y, z} (x == 3,y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
TFunctionCols matrix = transpose output
  where Tmatrix = transpose matrix
        output = map (\x -> TFunction x) Tmatrix

// SwapRows : {x, y, z} (x == 3, y == 4, z == 32)
//  => [x][y][z] -> [x][y][z]
// SwapRows matrix = [Z] # [Y] # [X]
//   where X = matrix @ 0
//         Y = matrix @ 1
//         Z = matrix @ 2

SPbox : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
SPbox matrix = output
  where Shifted = ShiftCols matrix
        output = TFunctionCols Shifted



//Linear layer

SmallSwap : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
SmallSwap state = [[second] # [first] # [fourth] # [third]] # state @@ [ 1..2]
  where first = (state @ 0) @ 0
        second = (state @ 0) @ 1
        third = (state @ 0) @ 2
        fourth = (state @ 0) @ 3

BigSwap : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
BigSwap state = [[third] # [fourth] # [first] # [second]] # state @@[1..2]
  where first = (state @ 0) @ 0// : [3][32]
        second = (state @ 0) @ 1// : [3][32]
        third = (state @ 0) @ 2// : [3][32]
        fourth = (state @ 0) @ 3// : [3][32]


//Add Constant

AddConstant : {x, y, z} (x == 3, y == 4, z == 32) 
 => ([x][y][z], [z]) -> [x][y][z]
AddConstant (state, r) = [([S00] # (state @ 0) @@ [1..3])] # (state @@ [1,2])
  where S00 = (((state @ 0) @ 0) ^ 0x9e377900 ^ r)

//Gimli Permutation

NextWord : {x, y, z} (x == 3, y == 4, z == 32)
 => ([x][y][z], [z]) -> [x][y][z]
NextWord (state, i) = output
  where output = if i % 4 == 0 
                 then AddConstant((SmallSwap (SPbox state)), i)
                 else if i % 4 == 2 
                      then BigSwap(SPbox state)
                      else SPbox state

GimliPermutation : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [25][x][y][z]
GimliPermutation state = output 
  where output = [state] # [NextWord(x, i) | i <- [24, 23 .. 1]
                                           | x <- output
                           ]