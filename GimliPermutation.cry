//Non linear layer 

Shift : {y ,z} (y == 3, z == 32)
 => [y][z] -> [y][z]
Shift column = [a] # [b] # [(column @ 2)]
  where  a = (column @ 0 <<< 24) : [32]
         b = (column @ 1 <<< 9) : [32]

ShiftCols : {x, y ,z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
ShiftCols matrix = transpose Shifted
  where Tmatrix = transpose matrix
        Shifted = map (\x -> Shift x) Tmatrix

TFunction : {y, z} (y == 3, z == 32)
 => [y][z] -> [y][z]
TFunction column = [x1] # [y1] # [z1]
  where x = (column @ 0) : [32]
        y = (column @ 1) : [32]
        z = (column @ 2) : [32]
        x1 = x ^ (z << 1) ^ (( y && z) << 2)
        y1 = y ^ x ^ ( (x || z) << 1)
        z1 = z ^ y ^ ((x && y) << 3)

TFunctionCols : {x, y, z} (x == 3,y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
TFunctionCols matrix = transpose output
  where Tmatrix = transpose matrix
        output = map (\x -> TFunction x) Tmatrix

Swap : {y, z} (y == 3, z == 32)
 => [y][z] -> [y][z]
Swap column = [newX] # [y] # [newZ]
  where x = (column @ 0) : [32]
        y = (column @ 1) : [32]
        z = (column @ 2) : [32]
        newX = z 
        newZ = x

SwapCols : {x, y, z} (x == 3, y ==4, z == 32)
 => [x][y][z] -> [x][y][z]
SwapCols matrix = transpose output
  where Tmatrix = transpose matrix
        output = map (\x -> Swap x) Tmatrix

SPbox : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
SPbox matrix = Swapped
  where Shifted = ShiftCols matrix
        Value = TFunctionCols Shifted
        Swapped = SwapCols Value


//Linear layer

SmallSwap : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
SmallSwap matrice = transpose ([second] # [first] # [fourth] # [third])
  where transposed = transpose matrice
        first = (transposed @ 0) : [3][32]
        second = (transposed @ 1) : [3][32]
        third = (transposed @ 2) : [3][32]
        fourth = (transposed @ 3) : [3][32]

BigSwap : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
BigSwap matrice = transpose ([third] # [fourth] # [first] # [second])
  where transposed = transpose matrice
        first = (transposed @ 0) : [3][32]
        second = (transposed @ 1) : [3][32]
        third = (transposed @ 2) : [3][32]
        fourth = (transposed @ 3) : [3][32]


//Add Constant

AddConstant : {x, y, z} (x == 3, y == 4, z == 32) 
 => ([x][y][z], [z]) -> [x][y][z]
AddConstant (matrix, r) = [([S00] # (matrix @ 0) @@ [1..3])] # (matrix @@ [1,2])
  where S00 = (0x9e377900 ^ r ^ ((matrix @ 0) @ 0))

//Gimli Permutation

GimliPermutation : {x, y, z} (x == 3, y == 4, z == 32)
 => [x][y][z] -> [x][y][z]
GimliPermutation matrix = output ! 0
  where SPboxed = SPbox matrix
        SmallSwaped = SmallSwap SPboxed
        BigSwaped = BigSwap SPboxed
        output = map(\r -> if r % 4 == 0 
                           then AddConstant (SmallSwaped,r)
                           else if r % 4 == 2 
                                then BigSwaped
                                else SPboxed) [24, 23 .. 1]


