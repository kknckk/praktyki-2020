enable_experimental;

// Allocate a pointer of type 'ty', referring to the value 'v'
let alloc_init ty v = do {
  p <- crucible_alloc ty;
  crucible_points_to p v;
  return p;
};

// Allocate a pointer to a fresh symbolic value
// Returns a pair of the symbolic variable and the pointer
let ptr_to_fresh n ty = do {
  x <- crucible_fresh_var n ty;
  p <- alloc_init ty (crucible_term x);
  return (x, p);
};

let i8 = llvm_int 8;
let i32 = llvm_int 32;

 print "Zaczynamy zabawe";
 
 import "GimliPermutation.cry" as Gimli;
 print "Cryptol zaimportowany";

 l <- llvm_load_module "cipher.bc";
 print "C zaladowane";

let GimliSetup = do {
    (state, state_p) <- ptr_to_fresh "!!!!!!!!!!!!!!!!----------------................" (llvm_array 12 i32);
    crucible_execute_func [state_p];
    let gimli_result = crucible_term{{Gimli::GimliPermutation state : [12][32]}};
    crucible_points_to_untyped state_p gimli_result;
};


print "Odpalamy weryfikacje";
time(crucible_llvm_verify l "gimli" [] false GimliSetup abc);

